plugins {
    id 'sstaf'
    id 'jvm-test-suite'
    id 'maven-publish'
    id 'application'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation project(':framework:mil.sstaf.core')
    implementation project(':framework:mil.sstaf.session')
    implementation project(':framework:mil.sstaf.analyzer')
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.7'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.2'
    implementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    runtimeOnly group: 'org.apache.commons', name: 'commons-csv', version: '1.10.0'
    runtimeOnly group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.7'
    runtimeOnly group: 'net.java.dev.jna', name: 'jna', version: '5.13.0'
    runtimeOnly project(':features:ansurHandler:mil.devcom_sc.ansur.api')
    runtimeOnly project(':features:ansurHandler:mil.devcom_sc.ansur.messages')
    runtimeOnly project(':features:ansurHandler:mil.devcom_sc.ansur.handler')
    runtimeOnly project(':features:support:mil.sstaf.telemetry')
    runtimeOnly project(':features:equipment:mil.devcom_dac.equipment.api')
    runtimeOnly project(':features:equipment:mil.devcom_dac.equipment.handler')
    runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.agent')
    runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.api')
    runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.models.api')
    runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.models.cardiovascular')
    runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.models.cognition')
    runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.models.energy')
    runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.models.hydration')
    runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.models.musculature')
    runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.models.respiration')
    runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.models.vision')
    runtimeOnly project(':features:support:mil.sstaf.blackboard.api')
    runtimeOnly project(':features:support:mil.sstaf.blackboard.inmem')
}

sstaf {
    // This does not have to be a complete description (e.g. here 'org.apache.commons.collections' does not export anything here).
    // It only needs to be good enough to work in the context of this application we are building.
    module('commons-math3-3.6.1.jar', 'commons.math3', '3.6.1') {
        exports('org.apache.commons.math3.random')
        exports('org.apache.commons.math3.analysis.function')
        exports('org.apache.commons.math3.analysis.polynomials')
        exports('org.apache.commons.math3.analysis')
    }

    module('jopt-simple-5.0.4.jar', 'jopt.simple', '5.0.4')
    module('jmh-generator-annprocess-1.36.jar', 'jmh.generator.annprocess', '1.36')
    module('jmh-core-1.36.jar', 'jmh.core', '1.36') {
        exports('org.openjdk.jmh.annotations')
        exports('org.openjdk.jmh')
    }

    //
    // CSV support for ANSUR
    //
    module('commons-csv-1.10.0.jar', 'commons.csv', '1.10.0') {
        exports 'org.apache.commons.csv'
    }

    //
    // Set the hashing algorithm to be used for the resources.
    //
    hashAlgorithm = 'SHA-384'
}


application {
    mainClass = 'mil.sstaf.analyzer.Main'
    mainModule = 'mil.sstaf.analyzer'
    applicationName = 'sstaf-analyzer'

    applicationDefaultJvmArgs = ['--add-modules', 'ALL-MODULE-PATH']
}

startScripts {
    // MODULE_PATH is too long when using separate jar files, so just set the lib path instead.

    def winScriptFile = file getWindowsScript()
    def winFileText = winScriptFile.text
    winFileText = winFileText.replaceAll('set MODULE_PATH=.*', 'rem original MODULE_PATH declaration replaced by:\nset MODULE_PATH=%APP_HOME%\\\\lib')
    winScriptFile.text = winFileText

    // This might not be required, as I don't have a UNIX machine to test on.

    //def unixScriptFile = file getUnixScript()
    //def unixFileText = unixScriptFile.text
    //unixFileText = unixFileText.replaceFirst('MODULE_PATH=.*', '# original MODULE_PATH declaration replaced by:\nMODULE_PATH=\\$APP_HOME/lib')
    //unixScriptFile.text = unixFileText
}

testing {
    suites {
        test {
            useJUnitJupiter()
        }

        integrationTest(JvmTestSuite) {
            dependencies {
                implementation project(':framework:mil.sstaf.core')
                implementation project(':framework:mil.sstaf.session')
                implementation project(':framework:mil.sstaf.analyzer')
				implementation 'org.slf4j:slf4j-api:2.0.7'
				implementation 'org.slf4j:slf4j-simple:2.0.7'
                implementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'
                implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
                implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.2'
                implementation project(':features:ansurHandler:mil.devcom_sc.ansur.messages')
                runtimeOnly project(':features:ansurHandler:mil.devcom_sc.ansur.api')
                runtimeOnly project(':features:ansurHandler:mil.devcom_sc.ansur.handler')
                runtimeOnly project(':features:equipment::mil.devcom_dac.equipment.handler')
                runtimeOnly project(':features:equipment:mil.devcom_dac.equipment.api')
                runtimeOnly project(':features:equipment:mil.devcom_dac.equipment.handler')
                runtimeOnly project(':features:simplePhysiologyAgent::mil.sstaf.physiology.api')
                runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.agent')
                runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.api')
                runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.models.api')
                runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.models.cardiovascular')
                runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.models.cognition')
                runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.models.energy')
                runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.models.hydration')
                runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.models.musculature')
                runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.models.respiration')
                runtimeOnly project(':features:simplePhysiologyAgent:mil.sstaf.physiology.models.vision')
                runtimeOnly project(':features:support:mil.sstaf.blackboard.api')
                runtimeOnly project(':features:support:mil.sstaf.blackboard.api')
                runtimeOnly project(':features:support:mil.sstaf.blackboard.inmem')
                runtimeOnly project(':features:support:mil.sstaf.telemetry')
            }

            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }

    tasks.named('check') {
        dependsOn(testing.suites.integrationTest)
    }
}
